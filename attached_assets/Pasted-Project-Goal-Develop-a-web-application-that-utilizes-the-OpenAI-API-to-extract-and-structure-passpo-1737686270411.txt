Project Goal: Develop a web application that utilizes the OpenAI API to extract and structure passport data from an uploaded image without using a database for storage. The application should perform the following tasks:

1. Frontend Development (HTML):

Task: Create a simple and user-friendly HTML frontend.
Requirements:
Include a file input element (<input type="file">) that accepts image files (specifically .jpg, .jpeg, and .png).
Add a button to trigger the passport parsing process after a file is selected.
Optionally, include an area to visually display the uploaded image (for user confirmation).
Include a designated area (e.g., a <pre> or <div>) to display the resulting JSON output in the console and in the designated area on the page.
2. OpenAI API Integration (JavaScript):

Task: Implement JavaScript code to interact with the OpenAI API (specifically the Vision API and possibly a text completion model like GPT-3.5 or GPT-4).
Requirements:
API Key: Assume the user's OpenAI API key will be handled securely (e.g., for this prompt, the API Key will be directly written in the code, but mention that in a real-world application it should be stored in environment variables).
File Handling: Read the image file uploaded by the user from the file input element.
Error Handling: Implement robust error handling for API requests and file processing.
Asynchronous Operations: Handle API calls asynchronously using promises or async/await.
3. Passport Image OCR (OpenAI Vision API):

Task: Use the OpenAI Vision API to extract text (OCR) from the uploaded passport image.
Requirements:
API Endpoint: Send the image data to the appropriate OpenAI Vision API endpoint.
Data Formatting: Encode the image appropriately (e.g., base64) before sending it to the API, if needed.
Response Parsing: Retrieve the raw text output extracted by the OCR process from the API response.
4. Data Extraction and Structuring (OpenAI GPT API, if needed, or Regex):

Task: Analyze the raw text extracted from the passport image to identify and extract key passport data.
Requirements:
Data Identification: Use a method for reliable data extraction, based on the type of passport that will be scanned. For example, using the GPT model, provide clear instructions (or few-shot examples) to extract specific data fields. Alternatively, you can use regular expressions or other pattern-matching techniques based on common passport formats, but if you do so, you will need to create rules for multiple passport issuing countries. If using Regex, the AI should identify and handle multiple passport formats.
Key Data Fields: Extract at least the following fields (if present in the image):
Full Name
Date of Birth
Passport Number
Nationality
Date of Issue
Date of Expiry
Place of Birth
Issuing Authority
MRZ (Machine Readable Zone) data (if present)
Data Cleaning: Clean and normalize the extracted data (e.g., standardize date formats).
5. JSON Formatting (JavaScript):

Task: Structure the extracted passport data into a well-formatted JSON object.
Requirements:
Structure: Create a JSON object with clear key-value pairs representing the extracted passport fields.
Example:
{
    "fullName": "John Doe",
    "dateOfBirth": "1990-01-15",
    "passportNumber": "A1234567",
    "nationality": "USA",
    "dateOfIssue": "2021-06-01",
    "dateOfExpiry": "2031-05-31",
    "placeOfBirth": "New York",
    "issuingAuthority": "US Department of State",
    "mrz": {
        "line1": "...",
        "line2": "..."
    }
}
6. Output Display (JavaScript & HTML):

Task: Display the formatted JSON object in the designated area on the HTML frontend and console log it.
Requirements:
Console Output: Use console.log() to output the JSON object to the browser's developer console.
Frontend Display: Insert the JSON object into a pre-formatted text area or another suitable HTML element on the page, ensuring readability.
Error Handling: If any errors occur during the process, display informative error messages to the user in the designated output area.
7. Optional Enhancements (Mention these for a more complete solution):

UI/UX:
Progress indicators during processing.
Input validation and error messages.
Security:
Guidance on how to handle API keys securely in a production environment.
Advanced Data Extraction:
Consider using more advanced techniques like named entity recognition (NER) if the AI is capable.
Image Preprocessing:
The AI could be prompted to suggest or implement image preprocessing steps (e.g., resizing, cropping, contrast adjustment) to improve OCR accuracy if needed.
Constraints:

No Database: The application should not use any external database to store the extracted data. All processing should be done in memory, and the output should be displayed directly on the frontend.
OpenAI API Only: Rely solely on the OpenAI API for OCR and data extraction. Avoid using other external libraries or services for these tasks.
Error Handling: The code should gracefully handle various error scenarios like incorrect file type, API request failiures, or missing data, and communicate those errors to the user.