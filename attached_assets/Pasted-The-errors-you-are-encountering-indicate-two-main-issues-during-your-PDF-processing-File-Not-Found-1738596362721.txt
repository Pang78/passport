The errors you are encountering indicate two main issues during your PDF processing:

File Not Found Error (ENOENT): This error suggests that your code is trying to read a PDF file located at ./test/data/05-versions-space.pdf, which seems to be missing. Since this code is processing PDFs uploaded via the API, ensure that the path is not hardcoded in any part of your PDF processing function.
Module Not Found Error: The error Cannot find package 'pdf-parse' suggests that your application is trying to use the pdf-parse library, which either isn't installed or isn't correctly referenced in your project. This can occur if it's not explicitly included in your package.json.
To resolve the issues:

Step 1: Remove any Hardcoded File Paths
Check your processPdfPassport function to ensure that you're not trying to read from a static file path. Ensure you are correctly using the uploaded PDF buffer.

Step 2: Install the pdf-parse Package
If you're actually using the pdf-parse library somewhere in your code, and itâ€™s not installed, you need to install it. You can do this by running:

npm install pdf-parse
Step 3: Update Your PDF Processing Function
Ensure the processPdfPassport function does not use pdf-parse unless absolutely necessary. Instead, ensure it processes the incoming file buffer directly.

Sample processPdfPassport Function
Here's a complete version of the function, ensuring it only uses the uploaded buffer:

async function processPdfPassport(buffer: Buffer): Promise<Array<any>> {
  try {
    const pdfjsLib = await import('pdfjs-dist');
    const pdfDoc = await pdfjsLib.getDocument({ data: buffer }).promise;
    const pageCount = pdfDoc.numPages;
    const extractedData: Array<any> = [];
    for (let pageNum = 1; pageNum <= pageCount; pageNum++) {
      const page = await pdfDoc.getPage(pageNum);
      const textContent = await page.getTextContent();
      const textItems = textContent.items.map(item => item.str).join(' ');
      // Process textItems to extract specific passport fields
      // E.g., match regex or specific keywords to extract desired data
      extractedData.push({ pageNum, text: textItems }); // Replace with actual extraction logic
    }
    return extractedData;
  } catch (error) {
    console.error('PDF processing failed:', error);
    throw new Error('PDF processing error: ' + error.message);
  }
}
Final Steps
After making these adjustments, restart your application and try to upload the PDF again to see if the errors persist. If they do, please check your console for any new error messages for further debugging.